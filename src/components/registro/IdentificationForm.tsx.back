'use client'

import { Box, Button, FormControl, FormControlLabel, FormLabel, Grid, InputLabel, MenuItem, Radio, RadioGroup, Select, SelectChangeEvent, TextField, Typography } from "@mui/material";
import { ChangeEvent, FC, ReactElement, Reducer, useReducer, useRef, useState } from "react";

import {Storage} from '@mui/icons-material';
import log from "loglevel";
import { DateField } from "@mui/x-date-pickers";
import dayjs, { Dayjs } from "dayjs";

//Definición de tipos necesarios

enum ActionType{
  FILL_FORM = "FILL_FORM",
  RESET_FORM = "RESET_FORM",
  FILL_CEDULA = "FILL_CEDULA",
  FILL_NOMBRES = "FILL_NOMBRES",
  FILL_APELLIDOS = "FILL_APELLIDOS",
  FILL_FECHA_DE_NACIMIENTO = "FILL_FECHA_DE_NACIMIENTO",
  FILL_GENERO = "FILL_GENERO"
}

interface IReducer{
  type:ActionType,
  data:IdentificacionForm
}

export interface IdentificacionForm{
  cedula_identidad?:string;
  nombres:string;
  apellidos:string;
  fecha_nacimiento: Dayjs;
  codigo_genero:string;
}

const InitialStateFormulario:IdentificacionForm = {
  cedula_identidad:"",
  nombres:"",
  apellidos:"",
  fecha_nacimiento:dayjs(),
  codigo_genero:""
}

interface DatosCedulaDTO{
  datosDeCedula:{
    cedula_identidad?:string;
    nombres:string;
    apellidos:string;
    fecha_nacimiento:Dayjs;
    codigo_genero:string;
  },
  exito:boolean;
}

interface alternativasDelFormulario{
  conCedulaParaguaya:boolean;
  extranjero:boolean;
  sinCedula:boolean;
}

const alternativasFormularioInicial:alternativasDelFormulario = {
  conCedulaParaguaya:true,
  extranjero:false,
  sinCedula:false,
}

export interface IdentificationFormProps{
  habilitarBotonSiguiente:(arg0:boolean) => void;
  actualizarIdentificacion:(arg0:IdentificacionForm) => void;
} 

const formularioReducer:Reducer<IdentificacionForm, IReducer> = (state=InitialStateFormulario, action) =>{
  
    switch(action.type){
      case ActionType.FILL_FORM:
        return Object.assign({},{
          nombres:action.data.nombres,
          apellidos:action.data.apellidos,
          fecha_nacimiento:action.data.fecha_nacimiento,
          codigo_genero:action.data.codigo_genero
        
        })
        
      case ActionType.RESET_FORM:
        return Object.assign({},{
          nombres:"",
          apellidos:"",
          fecha_nacimiento:"",
          codigo_genero:""
        })
      case ActionType.FILL_CEDULA:
          return Object.assign({},{
            ...state,
            cedula_identidad:action.data.cedula_identidad,
  
          })
      case ActionType.FILL_NOMBRES:
        return Object.assign({},{
          ...state,
          nombres:action.data.nombres,

        })
      case ActionType.FILL_APELLIDOS:
          return Object.assign({},{
            ...state,
            apellidos:action.data.apellidos,
  
          })
      case ActionType.FILL_FECHA_DE_NACIMIENTO:
            return Object.assign({},{
              ...state,
              fecha_nacimiento:action.data.fecha_nacimiento,
    
            })
      case ActionType.FILL_GENERO:
              return Object.assign({},{
                ...state,
                codigo_genero:action.data.codigo_genero,
      
              })
       default:
        return state; 
    }
  
}

const IdentificationForm:FC<IdentificationFormProps> = (props:IdentificationFormProps):ReactElement =>{
  const [alternativaFormulario, setAlternativaFormulario] = useState<alternativasDelFormulario>(alternativasFormularioInicial);
  const [error,setError] = useState({error:false,msg:""});
  const [formulario, dispatch] = useReducer<Reducer<IdentificacionForm,IReducer>>(formularioReducer, InitialStateFormulario );
  const mostrarBotonConsulta = alternativaFormulario.conCedulaParaguaya && !alternativaFormulario.extranjero;
  const hacerCamposEditables = alternativaFormulario.extranjero;
  const etiquetaCampoCedulaProntuario = alternativaFormulario.sinCedula ? "Prontuario" : "Ingrese el número de cédula "

  console.log("Datos del formulario:", formulario);

  const onConsultarRegistroCivil = async () =>{
    setError({error:false, msg:""});
    const url = `${process.env.NEXT_PUBLIC_IDENTIFACIL_CONSULTACI_API}/get_datos_ci/`;
    
    try{
      const headers = new Headers();
      headers.append('Content-Type','application/json');
      headers.append('Accept','*/*');
      const response = await fetch(url,{
        method:'POST',
        headers:headers,
        mode:'cors',
        body: JSON.stringify({"cedula":formulario.cedula_identidad})
      });
      if(response.ok){
        const data:DatosCedulaDTO = await response.json();
        // console.log(data);
        if(data.exito && data.datosDeCedula.nombres != ""){
          // console.log(data);
          dispatch({type:ActionType.FILL_FORM, data:data.datosDeCedula});
          props.actualizarIdentificacion(data.datosDeCedula);
          props.habilitarBotonSiguiente(true);
        }
      }
      
      
      

    }catch(error){
      log.error("Hubo un error durante la consulta de la CI:", error);
      setError({error:true, msg:'Hubo un error en la consulta de la cedula'})
    }
    
    
  }
  

  const onNacionalidadChangeHandler = (event:React.ChangeEvent<HTMLInputElement>) =>{
      setAlternativaFormulario(
        (previus:alternativasDelFormulario) =>{
          return{
            ...previus,
            extranjero:event.target.value === "true" ? true : false,
          }
        }
      )
  }

  const onTieneCedulaChangeHandler = (event:React.ChangeEvent<HTMLInputElement>) =>{
    setAlternativaFormulario(
      (previus:alternativasDelFormulario) =>{
        return{
          ...previus,
          sinCedula:event.target.value === "true" ? true : false,
        }
      }
    )
  }

  const onGeneroChange = (event: SelectChangeEvent) =>{
    dispatch({type:ActionType.FILL_GENERO, data:{
      ...formulario,
      codigo_genero:event.target.value}});
  }

  const onFechaDeNacimientoChange = (event:ChangeEvent<HTMLInputElement> | null) =>{
    dispatch({type:ActionType.FILL_FECHA_DE_NACIMIENTO, data:{
      ...formulario,
      fecha_nacimiento:event ? dayjs(event.target.value) : dayjs()}});
  }
  const onTextChangeHandler = (event:React.ChangeEvent<HTMLInputElement>) =>{
    switch (event.target.name){
      case "cedula":
        dispatch({type:ActionType.FILL_CEDULA, data:{
          ...formulario,
          cedula_identidad:event.target.value}});
        break;
      case "nombres":
        dispatch({type:ActionType.FILL_NOMBRES, data:{
          ...formulario,
          nombres:event.target.value}});
        break;
      case "apellidos":
        dispatch({type:ActionType.FILL_APELLIDOS, data:{
          ...formulario,
          apellidos:event.target.value}});
        break;

      case "fecha_nacimiento":
        dispatch({type:ActionType.FILL_FECHA_DE_NACIMIENTO, data:{
          ...formulario,
          fecha_nacimiento:dayjs(event.target.value)}});
        break;
    }

  }


  return(
        <Box sx={{padding:"10px"}}>
          <Grid container spacing={2}>
            <Grid item sm={3}>
              <FormLabel id="nacionalidad">Es Paraguayo ?</FormLabel>
              <RadioGroup row defaultValue="SI" onChange={onNacionalidadChangeHandler} value={alternativaFormulario.extranjero} name="nacionalidad-opciones">
                <FormControlLabel value={false} control={<Radio />} label="SI" />
                <FormControlLabel value={true} control={<Radio />} label="NO" />
              </RadioGroup>
            </Grid>
            <Grid item sm={3}>
              <FormLabel id="nacionalidad">Tiene Cedula de Identidad ?</FormLabel>
              <RadioGroup row defaultValue="NO" onChange={onTieneCedulaChangeHandler} value={alternativaFormulario.sinCedula} name="cedula-opciones">
                <FormControlLabel value={false} control={<Radio />} label="SI" />
                <FormControlLabel value={true} control={<Radio />} label="NO" />
              </RadioGroup>
            </Grid>
          </Grid>
        
          <Grid container spacing={2}>
            <Grid item xs={6} >
              {!error.error ?
              <TextField autoComplete="off"  id="cedula" value={formulario.cedula_identidad} name="cedula" onChange={onTextChangeHandler} fullWidth label={etiquetaCampoCedulaProntuario} variant="outlined" required />
              :
              <TextField autoComplete="off" error helperText={error.msg} name={"cedula"}  id="cedula" value={formulario.cedula_identidad} onChange={onTextChangeHandler} fullWidth label="Ingrese cedula" variant="outlined" required />
              
              }
              
            </Grid>
            {mostrarBotonConsulta && <Grid item xs={2} >
              <Button sx={{minHeight:"100%"}} onClick={onConsultarRegistroCivil} variant="contained" endIcon={<Storage />}>
                Consultar
              </Button>
            </Grid>}
            <Grid item xs={6}>
              <TextField  id="nombres" name="nombres" onChange={onTextChangeHandler} value={formulario.nombres} fullWidth label="Nombres" variant="outlined" disabled={!hacerCamposEditables} />
            </Grid>
            <Grid item xs={6}>
              <TextField  id="apellido" name="apellidos" onChange={onTextChangeHandler} value={formulario.apellidos} fullWidth label="Apellidos" variant="outlined" disabled={!hacerCamposEditables} />
            </Grid>
            <Grid item xs={6}>
              <DateField  id="fechaNacimiento" name="fecha_nacimiento" onChange={onFechaDeNacimientoChange} value={formulario.fecha_nacimiento} format="DD/MM/AAAA" fullWidth label="Fecha de Nacimiento" variant="outlined" disabled={!hacerCamposEditables} />
            </Grid>
            {!hacerCamposEditables && <Grid item xs={6}>
              <TextField  
              id="genero"
              name="genero"
              value={formulario.codigo_genero == '1' ? 'femenino' : formulario.codigo_genero == '2' ? 'masculino' : ''} 
              fullWidth 
              label="Genero" 
              variant="outlined"
              
               
              disabled={!hacerCamposEditables} />
              </Grid>}
              {hacerCamposEditables && <Grid item xs={6}>
                <FormControl fullWidth>
                  <InputLabel id="etiquetaDeGenero">Genero</InputLabel>
                  <Select
                  labelId="etiquetaDeGenero"
                  onChange={onGeneroChange}
                  label="Genero"
                  value={formulario.codigo_genero}>

                  <MenuItem value={1}>Femenino</MenuItem>  
                  <MenuItem value={2}>Masculino</MenuItem>
                    
                  </Select>
                </FormControl>
              </Grid>}
            </Grid>
            
          
        </Box>
      
  )

}

export default IdentificationForm;;